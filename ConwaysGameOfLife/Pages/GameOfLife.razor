@page "/"
@using System.Net.Http.Json
@using System.Timers
@implements IDisposable
@inject IJSRuntime JS
@inject HttpClient Http

<div class="container">
    <h1>Conway's Game of Life + AI Visualization</h1>
    
    <div class="game-controls">
        <button @onclick="ToggleSimulation" class="control-button @(IsRunning ? "pause" : "start")">
            @(IsRunning ? "Pause" : "Start")
        </button>
        <button @onclick="ResetGrid" class="control-button reset">Reset</button>
        
        <div class="pattern-select">
            <select @bind="SelectedPattern" class="pattern-dropdown">
                <option value="">-- Select Pattern --</option>
                <optgroup label="Oscillators">
                    <option value="blinker">Blinker</option>
                    <option value="toad">Toad</option>
                    <option value="beacon">Beacon</option>
                    <option value="pulsar">Pulsar</option>
                </optgroup>
                <optgroup label="Spaceships">
                    <option value="glider">Glider</option>
                    <option value="lwss">Lightweight Spaceship</option>
                </optgroup>
                <optgroup label="Other">
                    <option value="random">Random</option>
                    <option value="glider_gun">Gosper Glider Gun</option>
                </optgroup>
            </select>
            <button @onclick="ApplySelectedPattern" class="control-button apply-pattern">Apply Pattern</button>
        </div>
        
        <button @onclick="GenerateImage" class="control-button generate" disabled="@(IsRunning || !HasRun)">
            Generate AI Image
        </button>
        
        <div class="speed-control">
            <label for="speedSlider">Speed: @SimulationSpeed</label>
            <input type="range" id="speedSlider" min="1" max="20" step="1" @bind="SimulationSpeed" />
        </div>
    </div>

    <div class="content-area">
        <div class="grid-container" @onkeydown="(e) => HandleKeyDown(e.Key)" tabindex="0">
            <div class="grid" style="grid-template-columns: repeat(@GridSize, 1fr);">
                @for (int y = 0; y < GridSize; y++)
                {
                    @for (int x = 0; x < GridSize; x++)
                    {
                        int row = y;
                        int col = x;
                        <div class="cell @(Grid[row, col] ? "alive" : "")"
                             @onclick="() => ToggleCell(row, col)"
                             style="@(Grid[row, col] ? $"background-color: {CellColors[row, col]}" : "")">
                        </div>
                    }
                }
            </div>
            
            <div class="stats">
                <p>Generation: @Generation</p>
                <p>Living Cells: @CountLivingCells()</p>
            </div>
        </div>
        
        <div class="image-container">
            @if (IsLoading)
            {
                <div class="loading">Generating image...</div>
            }
            else if (!string.IsNullOrEmpty(ImageUrl))
            {
                <div class="ai-image">
                    <h3>AI Visualization</h3>
                    <img src="@ImageUrl" alt="AI Generated Image" />
                    <div class="image-prompt-container">
                        <h4>Generated Prompt:</h4>
                        <p class="image-prompt">@LastPrompt</p>
                    </div>
                </div>
            }
            else if (HasRun && !IsRunning)
            {
                <div class="no-image">
                    <p>Pause simulation and click "Generate AI Image" to visualize this pattern</p>
                </div>
            }
            else
            {
                <div class="instructions">
                    <h3>Instructions</h3>
                    <ol>
                        <li>Click cells to set initial pattern or use "Randomize"</li>
                        <li>Press "Start" to begin simulation</li>
                        <li>Press "Pause" when you see an interesting pattern</li>
                        <li>Click "Generate AI Image" to visualize the pattern</li>
                    </ol>
                    <p>You can also press Spacebar to toggle simulation.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Grid settings
    private const int GridSize = 30;
    private bool[,] Grid = new bool[GridSize, GridSize];
    private bool[,] NextGrid = new bool[GridSize, GridSize];
    private string[,] CellColors = new string[GridSize, GridSize];
    private string[,] NextCellColors = new string[GridSize, GridSize];
    
    // Pattern selection
    private string SelectedPattern = "";
    
    // Available colors for cells
    private readonly string[] ColorPalette = new string[] {
        "#FF5252", "#FF4081", "#E040FB", "#7C4DFF", "#536DFE", 
        "#448AFF", "#40C4FF", "#18FFFF", "#64FFDA", "#69F0AE", 
        "#B2FF59", "#EEFF41", "#FFFF00", "#FFD740", "#FFAB40"
    };
    
    // Simulation settings
    private Timer SimulationTimer;
    private bool IsRunning = false;
    private bool HasRun = false;
    private int Generation = 0;
    private int SimulationSpeed = 10;
    
    // Image generation
    private string ImageUrl = "";
    private string LastPrompt = "";
    private bool IsLoading = false;
    
    // API settings - in a production app, store these securely
    private readonly string ApiEndpoint = "https://api.your-llm-provider.com/generate";
    private readonly string ApiKey = "your-api-key";
    
    protected override void OnInitialized()
    {
        SimulationTimer = new Timer(1000 / SimulationSpeed);
        SimulationTimer.Elapsed += (sender, args) => InvokeAsync(RunSimulationStep);
        InitializeCellColors();
    }
    
    private void InitializeCellColors()
    {
        Random random = new Random();
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                CellColors[y, x] = ColorPalette[random.Next(ColorPalette.Length)];
                NextCellColors[y, x] = ColorPalette[random.Next(ColorPalette.Length)];
            }
        }
    }
    
    private void ToggleCell(int row, int col)
    {
        if (!IsRunning)
        {
            Grid[row, col] = !Grid[row, col];
            if (Grid[row, col])
            {
                // Assign a random color when cell becomes alive
                CellColors[row, col] = GetRandomColor();
            }
            StateHasChanged();
        }
    }
    
    private string GetRandomColor()
    {
        Random random = new Random();
        return ColorPalette[random.Next(ColorPalette.Length)];
    }
    
    private void ToggleSimulation()
    {
        IsRunning = !IsRunning;
        
        if (IsRunning)
        {
            HasRun = true;
            SimulationTimer.Interval = 1000 / SimulationSpeed;
            SimulationTimer.Start();
        }
        else
        {
            SimulationTimer.Stop();
        }
    }
    
    private void ResetGrid()
    {
        if (!IsRunning)
        {
            Grid = new bool[GridSize, GridSize];
            Generation = 0;
            HasRun = false;
            InitializeCellColors();
            StateHasChanged();
        }
    }
    
    private void ApplySelectedPattern()
    {
        if (!IsRunning && !string.IsNullOrEmpty(SelectedPattern))
        {
            // Clear the grid first
            Grid = new bool[GridSize, GridSize];
            
            // Apply the selected pattern
            switch (SelectedPattern)
            {
                case "blinker":
                    CreateBlinker();
                    break;
                case "toad":
                    CreateToad();
                    break;
                case "beacon":
                    CreateBeacon();
                    break;
                case "pulsar":
                    CreatePulsar();
                    break;
                case "glider":
                    CreateGlider();
                    break;
                case "lwss":
                    CreateLightweightSpaceship();
                    break;
                case "glider_gun":
                    CreateGosperGliderGun();
                    break;
                case "random":
                    RandomizeGrid();
                    return; // RandomizeGrid already has its own implementation
                default:
                    return;
            }
            
            // Assign colors to the cells that are now alive
            for (int y = 0; y < GridSize; y++)
            {
                for (int x = 0; x < GridSize; x++)
                {
                    if (Grid[y, x])
                    {
                        CellColors[y, x] = GetRandomColor();
                    }
                }
            }
            
            StateHasChanged();
        }
    }
    
    private void CreateBlinker()
    {
        // Place a blinker oscillator in the middle of the grid
        int centerY = GridSize / 2;
        int centerX = GridSize / 2;
        
        Grid[centerY - 1, centerX] = true;
        Grid[centerY, centerX] = true;
        Grid[centerY + 1, centerX] = true;
    }
    
    private void CreateToad()
    {
        // Place a toad oscillator in the middle of the grid
        int centerY = GridSize / 2;
        int centerX = GridSize / 2;
        
        Grid[centerY, centerX - 1] = true;
        Grid[centerY, centerX] = true;
        Grid[centerY, centerX + 1] = true;
        Grid[centerY + 1, centerX - 2] = true;
        Grid[centerY + 1, centerX - 1] = true;
        Grid[centerY + 1, centerX] = true;
    }
    
    private void CreateBeacon()
    {
        // Place a beacon oscillator in the middle of the grid
        int centerY = GridSize / 2;
        int centerX = GridSize / 2;
        
        Grid[centerY - 1, centerX - 1] = true;
        Grid[centerY - 1, centerX] = true;
        Grid[centerY, centerX - 1] = true;
        Grid[centerY, centerX] = true;
        
        Grid[centerY + 1, centerX + 1] = true;
        Grid[centerY + 1, centerX + 2] = true;
        Grid[centerY + 2, centerX + 1] = true;
        Grid[centerY + 2, centerX + 2] = true;
    }
    
    private void CreatePulsar()
    {
        // Place a pulsar oscillator in the middle of the grid
        int centerY = GridSize / 2;
        int centerX = GridSize / 2;
        
        // Place the central pattern (simplified pulsar)
        for (int offset = -4; offset <= 4; offset += 4)
        {
            // Horizontal lines
            for (int i = -2; i <= 2; i++)
            {
                if (i != 0)
                {
                    Grid[centerY + offset, centerX + i] = true;
                    Grid[centerY - offset, centerX + i] = true;
                }
            }
            
            // Vertical lines
            for (int i = -2; i <= 2; i++)
            {
                if (i != 0)
                {
                    Grid[centerY + i, centerX + offset] = true;
                    Grid[centerY + i, centerX - offset] = true;
                }
            }
        }
    }
    
    private void CreateGlider()
    {
        // Place a glider in the top-left quadrant
        int startY = GridSize / 4;
        int startX = GridSize / 4;
        
        Grid[startY, startX + 1] = true;
        Grid[startY + 1, startX + 2] = true;
        Grid[startY + 2, startX] = true;
        Grid[startY + 2, startX + 1] = true;
        Grid[startY + 2, startX + 2] = true;
    }
    
    private void CreateLightweightSpaceship()
    {
        // Place a lightweight spaceship in the left side
        int startY = GridSize / 2;
        int startX = GridSize / 4;
        
        Grid[startY, startX + 1] = true;
        Grid[startY, startX + 4] = true;
        Grid[startY + 1, startX] = true;
        Grid[startY + 2, startX] = true;
        Grid[startY + 2, startX + 4] = true;
        Grid[startY + 3, startX] = true;
        Grid[startY + 3, startX + 1] = true;
        Grid[startY + 3, startX + 2] = true;
        Grid[startY + 3, startX + 3] = true;
    }
    
    private void CreateGosperGliderGun()
    {
        // Place the Gosper Glider Gun pattern in the grid
        int startY = 5;  // Start closer to the top edge
        int startX = 5;  // Start closer to the left edge
        
        // Left block
        Grid[startY, startX] = true;
        Grid[startY, startX + 1] = true;
        Grid[startY + 1, startX] = true;
        Grid[startY + 1, startX + 1] = true;
        
        // Right block
        Grid[startY, startX + 34] = true;
        Grid[startY, startX + 35] = true;
        Grid[startY + 1, startX + 34] = true;
        Grid[startY + 1, startX + 35] = true;
        
        // Left ship
        Grid[startY + 10, startX + 24] = true;
        Grid[startY + 11, startX + 22] = true;
        Grid[startY + 11, startX + 24] = true;
        Grid[startY + 12, startX + 12] = true;
        Grid[startY + 12, startX + 13] = true;
        Grid[startY + 12, startX + 20] = true;
        Grid[startY + 12, startX + 21] = true;
        Grid[startY + 13, startX + 11] = true;
        Grid[startY + 13, startX + 15] = true;
        Grid[startY + 13, startX + 20] = true;
        Grid[startY + 13, startX + 21] = true;
        Grid[startY + 14, startX + 10] = true;
        Grid[startY + 14, startX + 16] = true;
        Grid[startY + 14, startX + 20] = true;
        Grid[startY + 14, startX + 21] = true;
        Grid[startY + 15, startX + 10] = true;
        Grid[startY + 15, startX + 14] = true;
        Grid[startY + 15, startX + 16] = true;
        Grid[startY + 15, startX + 17] = true;
        Grid[startY + 15, startX + 22] = true;
        Grid[startY + 15, startX + 24] = true;
        Grid[startY + 16, startX + 10] = true;
        Grid[startY + 16, startX + 16] = true;
        Grid[startY + 16, startX + 24] = true;
        Grid[startY + 17, startX + 11] = true;
        Grid[startY + 17, startX + 15] = true;
        Grid[startY + 18, startX + 12] = true;
        Grid[startY + 18, startX + 13] = true;
    }
    
    private void RandomizeGrid()
    {
        if (!IsRunning)
        {
            Random random = new Random();
            for (int y = 0; y < GridSize; y++)
            {
                for (int x = 0; x < GridSize; x++)
                {
                    Grid[y, x] = random.Next(0, 100) < 20; // 20% chance for a cell to be alive
                    if (Grid[y, x])
                    {
                        CellColors[y, x] = ColorPalette[random.Next(ColorPalette.Length)];
                    }
                }
            }
            StateHasChanged();
        }
    }
    
    private void RunSimulationStep()
    {
        // Copy grid to avoid modifying it while iterating
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                int neighbors = CountNeighbors(y, x);
                
                // Apply Game of Life rules
                if (Grid[y, x])
                {
                    // Any live cell with fewer than 2 or more than 3 live neighbors dies
                    NextGrid[y, x] = neighbors == 2 || neighbors == 3;
                    if (NextGrid[y, x])
                    {
                        // Keep the same color if the cell stays alive
                        NextCellColors[y, x] = CellColors[y, x];
                    }
                }
                else
                {
                    // Any dead cell with exactly 3 live neighbors becomes alive
                    NextGrid[y, x] = neighbors == 3;
                    if (NextGrid[y, x])
                    {
                        // New cell gets a random color or inherits from neighbors
                        NextCellColors[y, x] = GetRandomColor();
                    }
                }
            }
        }
        
        // Swap grids
        var tempGrid = Grid;
        Grid = NextGrid;
        NextGrid = tempGrid;
        
        var tempColors = CellColors;
        CellColors = NextCellColors;
        NextCellColors = tempColors;
        
        Generation++;
        StateHasChanged();
    }
    
    private int CountNeighbors(int row, int col)
    {
        int count = 0;
        
        for (int y = -1; y <= 1; y++)
        {
            for (int x = -1; x <= 1; x++)
            {
                if (y == 0 && x == 0) continue; // Skip the cell itself
                
                // Wrap around grid edges (toroidal grid)
                int neighborRow = (row + y + GridSize) % GridSize;
                int neighborCol = (col + x + GridSize) % GridSize;
                
                if (Grid[neighborRow, neighborCol])
                {
                    count++;
                }
            }
        }
        
        return count;
    }
    
    private int CountLivingCells()
    {
        int count = 0;
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                if (Grid[y, x]) count++;
            }
        }
        return count;
    }
    
    private string GeneratePatternDescription()
    {
        // Analyze the current Game of Life grid pattern
        int livingCells = CountLivingCells();
        double density = (double)livingCells / (GridSize * GridSize);
        
        // Get pattern characteristics
        var clusters = IdentifyClusters();
        bool hasSymmetry = DetectSymmetry();
        bool hasOscillator = Generation > 5;
        
        // Determine pattern-based descriptors that work well with simpler image models
        string patternType = GetPatternType(clusters, density, hasSymmetry);
        string landscapeType = GetLandscapeType(density, clusters.Count);
        string weatherElement = GetWeatherElement(clusters.Count, hasOscillator);
        string timeOfDay = GetTimeOfDayDescription(density);
        
        // Generate artistic direction
        string visualStyle = GetAbstractVisualStyle();
        string composition = GetCompositionStyle(hasSymmetry);
        string colorScheme = GetColorScheme();
        
        // Build the final prompt that focuses on abstract patterns and landscapes
        string finalPrompt = $"A {visualStyle} {landscapeType} with {patternType} patterns. " +
                             $"The scene has {weatherElement} during {timeOfDay}. " +
                             $"{composition} with a {colorScheme} color palette. " +
                             $"The image should evoke the mathematical beauty of Conway's Game of Life cellular automaton.";
        
        return finalPrompt;
    }
    
    private List<int> IdentifyClusters()
    {
        // A simple cluster identification algorithm using flood fill
        bool[,] visited = new bool[GridSize, GridSize];
        List<int> clusterSizes = new List<int>();
        
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize; x++)
            {
                if (Grid[y, x] && !visited[y, x])
                {
                    int size = FloodFill(y, x, visited);
                    clusterSizes.Add(size);
                }
            }
        }
        
        // Sort by size (largest first)
        clusterSizes.Sort((a, b) => b.CompareTo(a));
        return clusterSizes;
    }

    private int FloodFill(int row, int col, bool[,] visited)
    {
        // Check bounds, cell state, and if already visited
        if (row < 0 || row >= GridSize || col < 0 || col >= GridSize || 
            !Grid[row, col] || visited[row, col])
            return 0;
        
        visited[row, col] = true;
        int size = 1;
        
        // Check 8 neighbors
        for (int y = -1; y <= 1; y++)
        {
            for (int x = -1; x <= 1; x++)
            {
                if (y == 0 && x == 0) continue; // Skip the current cell
                
                // Handle wrapping around edges (toroidal grid)
                int neighborRow = (row + y + GridSize) % GridSize;
                int neighborCol = (col + x + GridSize) % GridSize;
                
                size += FloodFill(neighborRow, neighborCol, visited);
            }
        }
        
        return size;
    }
    
    private string GetPatternType(List<int> clusters, double density, bool hasSymmetry)
    {
        string[] sparsePatterns = {
            "minimal", "sparse", "scattered", "isolated", "dispersed",
            "fragmented", "delicate", "subtle", "thin", "rare"
        };
        
        string[] densePatterns = {
            "intricate", "complex", "elaborate", "detailed", "dense",
            "abundant", "rich", "textured", "comprehensive", "layered"
        };
        
        string[] symmetricalPatterns = {
            "symmetrical", "mirrored", "balanced", "ordered", "geometric", 
            "crystalline", "kaleidoscopic", "repeating", "fractal", "mandala-like"
        };
        
        Random random = new Random();
        
        if (hasSymmetry)
        {
            return symmetricalPatterns[random.Next(symmetricalPatterns.Length)];
        }
        else if (density > 0.25)
        {
            return densePatterns[random.Next(densePatterns.Length)];
        }
        else
        {
            return sparsePatterns[random.Next(sparsePatterns.Length)];
        }
    }

    private string GetLandscapeType(double density, int clusterCount)
    {
        string[] denseLandscapes = {
            "mountain range", "canyon formation", "rocky coastline", "forest vista",
            "dense cloud formations", "rugged terrain", "geological formations", "cliff face",
            "volcanic landscape", "river delta", "ancient rock formations"
        };
        
        string[] sparseLandscapes = {
            "desert landscape", "open plains", "calm lake surface", "foggy valley",
            "minimalist beach", "rolling hills", "distant horizon", "tranquil water",
            "open sky", "sand dunes", "salt flats"
        };
        
        string[] complexLandscapes = {
            "eroded landscape", "wave patterns", "rock strata", "flowing water patterns",
            "wind-sculpted terrain", "natural mosaic", "layered earth", "topographical map",
            "natural tapestry", "terrain contours", "crystallized mineral formation"
        };
        
        Random random = new Random();
        
        if (clusterCount > 5)
        {
            return complexLandscapes[random.Next(complexLandscapes.Length)];
        }
        else if (density > 0.25)
        {
            return denseLandscapes[random.Next(denseLandscapes.Length)];
        }
        else
        {
            return sparseLandscapes[random.Next(sparseLandscapes.Length)];
        }
    }

    private string GetWeatherElement(int clusterCount, bool hasOscillator)
    {
        string[] staticWeather = {
            "clear skies", "gentle mist", "soft fog", "dappled light",
            "hovering clouds", "morning dew", "still air", "hazy atmosphere",
            "scattered sunbeams", "light haze", "calm conditions"
        };
        
        string[] dynamicWeather = {
            "rippling waves", "flowing clouds", "shifting fog", "drifting mist",
            "moving shadows", "light patterns", "swirling fog", "flowing water",
            "dancing light", "shifting sand", "undulating patterns"
        };
        
        string[] complexWeather = {
            "intricate cloud formations", "layered fog", "overlapping shadows",
            "interacting light beams", "complex reflections", "multiple light sources",
            "contrasting elements", "varied atmospheric conditions", "textured mist"
        };
        
        Random random = new Random();
        
        if (hasOscillator)
        {
            return dynamicWeather[random.Next(dynamicWeather.Length)];
        }
        else if (clusterCount > 4)
        {
            return complexWeather[random.Next(complexWeather.Length)];
        }
        else
        {
            return staticWeather[random.Next(staticWeather.Length)];
        }
    }

    private string GetTimeOfDayDescription(double density)
    {
        string[] brightTimes = {
            "bright midday", "clear afternoon", "full daylight", "cloudless day",
            "harsh noon", "direct sunlight", "vivid daylight", "unfiltered sunlight"
        };
        
        string[] softTimes = {
            "golden hour", "early morning", "soft sunset", "gentle twilight",
            "blue hour", "dawn light", "dusk", "muted afternoon light",
            "fading daylight", "first light", "last light"
        };
        
        Random random = new Random();
        
        // Higher density patterns might look better with softer lighting
        if (density > 0.3)
        {
            return softTimes[random.Next(softTimes.Length)];
        }
        else
        {
            return brightTimes[random.Next(brightTimes.Length)];
        }
    }

    private string GetAbstractVisualStyle()
    {
        string[] visualStyles = {
            "minimalist", "abstract", "geometric", "ethereal", "surreal",
            "impressionistic", "textural", "atmospheric", "graphic", "monochromatic",
            "high-contrast", "architectural", "topographic", "crystalline"
        };
        
        Random random = new Random();
        return visualStyles[random.Next(visualStyles.Length)];
    }

    private string GetCompositionStyle(bool hasSymmetry)
    {
        string[] symmetricalCompositions = {
            "Perfect symmetrical composition", "Mirror-like balance", "Radial composition",
            "Centrally balanced arrangement", "Perfectly ordered composition",
            "Grid-like structure", "Mathematical proportion", "Precise arrangement"
        };
        
        string[] asymmetricalCompositions = {
            "Dynamic composition", "Rule-of-thirds arrangement", "Asymmetrical balance",
            "Off-center focal point", "Flowing arrangement", "Natural composition",
            "Diagonal elements", "Tension-filled arrangement", "Carefully unbalanced elements"
        };
        
        Random random = new Random();
        
        if (hasSymmetry)
        {
            return symmetricalCompositions[random.Next(symmetricalCompositions.Length)];
        }
        else
        {
            return asymmetricalCompositions[random.Next(asymmetricalCompositions.Length)];
        }
    }

    private string GetColorScheme()
    {
        string[] colorSchemes = {
            "monochromatic blue", "earth tone", "high-contrast black and white",
            "minimalist grayscale", "warm sunset", "cool blue and purple",
            "complementary orange and blue", "analogous green and blue",
            "muted pastel", "vibrant primary colors", "soft neutral",
            "dramatic dark", "ethereal light", "jewel tone", "metallic"
        };
        
        Random random = new Random();
        return colorSchemes[random.Next(colorSchemes.Length)];
    }
    
    private bool DetectSymmetry()
    {
        // Check horizontal symmetry (simplified)
        for (int y = 0; y < GridSize; y++)
        {
            for (int x = 0; x < GridSize / 2; x++)
            {
                if (Grid[y, x] != Grid[y, GridSize - 1 - x])
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    private async Task GenerateImage()
    {
        if (IsRunning || IsLoading) return;
        
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            // Generate a prompt based on the current pattern
            LastPrompt = GeneratePatternDescription();
            
            // Make sure the prompt is not empty
            if (string.IsNullOrWhiteSpace(LastPrompt))
            {
                throw new Exception("Generated prompt is empty");
            }

            Console.WriteLine($"Sending prompt: {LastPrompt}");
            
            // Change this URL to your API server's URL
            string apiUrl = "https://localhost:5062/api/generate-image";
            
            // Make sure the property name matches what the API expects
            var request = new 
            {
                prompt = LastPrompt  // Note: changed to lowercase 'prompt' - case matters!
            };
            
            var response = await Http.PostAsJsonAsync(apiUrl, request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<EverArtResponse>();
                
                if (result?.data?.Count > 0 && !string.IsNullOrEmpty(result.data[0].url))
                {
                    ImageUrl = result.data[0].url;
                }
                else
                {
                    throw new Exception("No image URL in the response");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API error response: {errorContent}");
                throw new Exception($"API error: {response.StatusCode}. {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating image: {ex.Message}");
            // Display error to user
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    // Add these classes to handle the EverArt API response
    public class EverArtResponse
    {
        public List<EverArtImage> data { get; set; }
    }

    public class EverArtImage
    {
        public string url { get; set; }
    }

    [JSInvokable]
    public void HandleKeyDown(string key)
    {
        if (key == " ") // Space key
        {
            ToggleSimulation();
        }
    }
    
    public void Dispose()
    {
        SimulationTimer?.Dispose();
    }
}